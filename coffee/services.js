// Generated by CoffeeScript 1.4.0
(function() {

  Site.value('BaseURL', 'http://localhost\\:55471');

  Site.factory('Utils', function() {
    return {
      moveElement: function(match, fromArr, toArr) {
        var elms, newFrom, newTo;
        elms = typeof match === 'object' ? _.where(fromArr, match) : [match];
        newTo = _.union(toArr, elms);
        newFrom = _.difference(fromArr, elms);
        return [newFrom, newTo];
      }
    };
  });

  Site.service('Api', function($http, $resource, BaseURL) {
    return {
      translation: $resource(BaseURL + '/api/translation/:id'),
      user: $resource(BaseURL + '/api/user/:id'),
      company: $resource(BaseURL + '/api/company/:id'),
      userRole: $resource(BaseURL + '/api/userrole/:id'),
      auth: {
        login: function(name, password) {
          return $http.post("/api/access/login", {
            Name: name,
            Password: password
          });
        },
        ping: function(token) {
          return $http({
            method: 'POST',
            url: "/api/ping",
            headers: {
              Authorization: "token " + token
            }
          });
        }
      }
    };
  });

  Site.service('Session', function($cookieStore, $http, $rootScope, $q, Api) {
    this.user = null;
    return {
      generateToken: function(id, token) {
        return Base64.encode("" + id + ":" + token);
      },
      login: function(user) {
        var token;
        this.user = user;
        token = this.generateToken(user.Id, user.AccessToken);
        $cookieStore.put('session-user', this.user);
        $http.defaults.headers.common['Authorization'] = "token " + token;
        return $rootScope.$broadcast('session:changed');
      },
      logout: function() {
        this.user = null;
        $cookieStore.remove('session-user');
        delete $http.defaults.headers.common['Authorization'];
        return $rootScope.$broadcast('session:changed');
      },
      isLoggedIn: function() {
        return this.user != null;
      },
      tryCookie: function() {
        var deferred, error, sessionUser, success,
          _this = this;
        deferred = $q.defer();
        sessionUser = $cookieStore.get('session-user');
        if (sessionUser) {
          success = function() {
            _this.login(sessionUser);
            return deferred.resolve();
          };
          error = function() {
            return deferred.reject();
          };
          this.validateSession(sessionUser).then(success, error);
        } else {
          deferred.reject();
        }
        return deferred.promise;
      },
      validateSession: function(sessionUser) {
        var deferred;
        if (!(sessionUser != null)) {
          deferred = $q.defer();
          deferred.reject();
          return deferred;
        }
        return Api.auth.ping(this.generateToken(sessionUser.Id, sessionUser.AccessToken));
      }
    };
  });

}).call(this);
