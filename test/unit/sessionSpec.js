// Generated by CoffeeScript 1.4.0
(function() {

  describe('session', function() {
    var cookieStore, http, httpMock, session, user;
    session = null;
    user = null;
    cookieStore = null;
    httpMock = null;
    http = null;
    beforeEach(module('Site'));
    beforeEach(inject(function($cookieStore, $httpBackend, $http, Session) {
      cookieStore = $cookieStore;
      http = $http;
      httpMock = $httpBackend;
      httpMock.when('GET', 'views/home/login.html').respond(200);
      session = Session;
      return user = {
        Id: 1,
        Email: 'foo@bar.com',
        FirstName: 'Foo',
        LastName: 'Bar',
        AccessToken: '1a2b3c'
      };
    }));
    it('should base64 encode tokens', function() {
      expect(session.generateToken('foo', 'bar')).toEqual('Zm9vOmJhcg==');
      return expect(session.generateToken(1, 'bar')).toEqual('MTpiYXI=');
    });
    it('should remember the user who logged in', function() {
      session.login(user);
      return expect(session.user).toEqual(user);
    });
    it('should be logged in after logging in and vice versa', function() {
      expect(session.isLoggedIn()).toBeFalsy();
      session.login(user);
      expect(session.isLoggedIn()).toBeTruthy();
      session.logout();
      return expect(session.isLoggedIn()).toBeFalsy();
    });
    it('should save a cookie with user data when logging in and vice versa', function() {
      var userCookie;
      session.login(user);
      userCookie = cookieStore.get('session-user');
      expect(userCookie).toEqual(user);
      session.logout();
      userCookie = cookieStore.get('session-user');
      return expect(userCookie).not.toBeDefined();
    });
    it('should set headers when logging in and vice versa', function() {
      session.login(user);
      expect(http.defaults.headers.common['Authorization']).toEqual('token MToxYTJiM2M=');
      session.logout();
      return expect(http.defaults.headers.common['Authorization']).not.toBeDefined();
    });
    it('should ping server and login user when trying to login with cookie data', function() {
      cookieStore.put('session-user', user);
      expect(session.isLoggedIn()).toBeFalsy();
      httpMock.expectPOST('/api/ping').respond(200);
      session.tryCookie();
      httpMock.flush();
      expect(session.isLoggedIn()).toBeTruthy();
      return expect(session.user).toEqual(user);
    });
    return it('should fail logging in an invalid user', function() {
      cookieStore.put('session-user', user);
      httpMock.expectPOST('/api/ping').respond(401);
      session.tryCookie();
      httpMock.flush();
      expect(session.isLoggedIn()).toBeFalsy();
      return expect(session.user).not.toBeDefined();
    });
  });

}).call(this);
