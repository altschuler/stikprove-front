// Generated by CoffeeScript 1.6.1
(function() {
  var Site, console, length, method, methods;

  Site = angular.module('Site', ['ngResource', 'ngCookies']);

  Site.config(function($routeProvider, $locationProvider, $httpProvider) {
    return $routeProvider.when('/', {
      templateUrl: 'views/home/index.html',
      controller: 'HomeIndexCtrl',
      auth: 0
    }).when('/login', {
      templateUrl: 'views/home/login.html',
      controller: 'HomeLoginCtrl',
      auth: 0
    }).when('/manage', {
      redirectTo: 'manage/usage'
    }).when('/manage/:page', {
      templateUrl: 'views/manage/index.html',
      controller: 'ManageIndexCtrl',
      auth: 0
    }).when('/user', {
      redirectTo: '/user/list'
    }).when('/user/:page', {
      templateUrl: 'views/user/index.html',
      controller: 'UserIndexCtrl',
      auth: 0
    }).when('/case/create', {
      templateUrl: 'views/case/create.html',
      controller: 'CaseCreateCtrl',
      auth: 0
    }).when('/not-found', {
      templateUrl: 'views/errors/not-found.html',
      auth: 0
    }).otherwise({
      redirectTo: '/not-found'
    });
  });

  Site.run(function($rootScope, $location, $route, Session) {
    var error, startListening, success, validateRoute;
    startListening = function() {
      return $rootScope.$on('$routeChangeStart', function(event, current, previous) {
        if (current.redirectTo == null) {
          return validateRoute(current.$route);
        }
      });
    };
    error = success = function() {
      validateRoute($route);
      return startListening();
    };
    Session.tryCookie().then(success, error);
    return validateRoute = function(route) {
      var authorized, clearance;
      authorized = false;
      clearance = route.auth;
      if (clearance === 0) {
        authorized = true;
      } else if ((clearance != null) && (Session.user != null)) {

      } else {
        authorized = Session.user != null;
      }
      if (!authorized) {
        return $location.path('/login');
      }
    };
  });

  Site.factory('Base64', function() {
    return {
      _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
      encode: function(input) {
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4, i, output, _results;
        output = "";
        i = 0;
        input = Base64._utf8_encode(input);
        _results = [];
        while (i < input.length) {
          chr1 = input.charCodeAt(i++);
          chr2 = input.charCodeAt(i++);
          chr3 = input.charCodeAt(i++);
          enc1 = chr1 >> 2;
          enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
          enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
          enc4 = chr3 & 63;
          if (isNaN(chr2)) {
            enc3 = enc4 = 64;
          } else if (isNaN(chr3)) {
            enc4 = 64;
          }
          _results.push(output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4));
        }
        return _results;
      },
      decode: function(input) {
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4, i, output, _results;
        output = "";
        i = 0;
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        _results = [];
        while (i < input.length) {
          enc1 = this._keyStr.indexOf(input.charAt(i++));
          enc2 = this._keyStr.indexOf(input.charAt(i++));
          enc3 = this._keyStr.indexOf(input.charAt(i++));
          enc4 = this._keyStr.indexOf(input.charAt(i++));
          chr1 = (enc1 << 2) | (enc2 >> 4);
          chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
          chr3 = ((enc3 & 3) << 6) | enc4;
          output = output + String.fromCharCode(chr1);
          if (enc3 !== 64) {
            output = output + String.fromCharCode(chr2);
          }
          if (enc4 !== 64) {
            output = output + String.fromCharCode(chr3);
          }
          _results.push(output = Base64._utf8_decode(output));
        }
        return _results;
      },
      _utf8_encode: function(string) {
        var c, n, utftext, _i, _ref;
        string = string.replace(/\r\n/g, "\n");
        utftext = "";
        for (n = _i = 0, _ref = string.length; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
          c = string.charCodeAt(n);
        }
        if (c < 128) {
          return utftext += String.fromCharCode(c);
        } else if (c > 127 && c < 2048) {
          utftext += String.fromCharCode((c >> 6) | 192);
          return utftext += String.fromCharCode((c & 63) | 128);
        } else {
          utftext += String.fromCharCode((c >> 12) | 224);
          utftext += String.fromCharCode(((c >> 6) & 63) | 128);
          return utftext += String.fromCharCode((c & 63) | 128);
        }
      },
      _utf8_decode: function(utftext) {
        var c, c1, c2, c3, i, string;
        string = "";
        i = 0;
        c = c1 = c2 = 0;
        while (i < utftext.length) {
          c = utftext.charCodeAt(i);
          if (c < 128) {
            string += String.fromCharCode(c);
            i++;
          } else if ((c > 191) && (c < 224)) {
            c2 = utftext.charCodeAt(i + 1);
            string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
            i += 2;
          } else {
            c2 = utftext.charCodeAt(i + 1);
            c3 = utftext.charCodeAt(i + 2);
            string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            i += 3;
          }
        }
        return string;
      }
    };
  });

  Site.controller('ManageIndexCtrl', function($scope, $routeParams, $location, Api, Utils) {
    $scope.company = new Api.company();
    $scope.addCompany = function() {
      return $scope.company.$save();
    };
    $scope.addRole = function(selectedRole) {
      var _ref;
      return _ref = Utils.moveElement({
        Id: parseInt(selectedRole)
      }, $scope.availableUserRoles, $scope.user.Roles), $scope.availableUserRoles = _ref[0], $scope.user.Roles = _ref[1], _ref;
    };
    $scope.companies = Api.company.query();
    $scope.activePage = $routeParams.page;
    return $scope.$on('$routeChangeSuccess', function(scope, next, current) {
      return $scope.activePage = next.params.page;
    });
  });

  Site.controller('NavCtrl', function($scope, Session, $location) {
    var updateScope;
    updateScope = function() {
      return $scope.data = {
        isLoggedIn: Session.isLoggedIn(),
        displayName: Session.isLoggedIn() ? Session.user.FirstName : void 0
      };
    };
    updateScope();
    $scope.$on('session:changed', updateScope);
    return $scope.logout = function() {
      Session.logout();
      return $location.path('/');
    };
  });

  Site.controller('HomeIndexCtrl', function($scope, Api) {
    return $scope.translateFromId = function(id) {
      return $scope.data.translated = Api.translation.get({
        id: id
      });
    };
  });

  Site.controller('HomeLoginCtrl', function($scope, $http, $location, Session, Api) {
    return $scope.login = function() {
      var error, success;
      success = function(response) {
        if (response.status === 200) {
          Session.login(response.data);
          return $location.path('/');
        }
      };
      error = function(response) {
        return alert('Invalid login!');
      };
      return Api.auth.login($scope.data.userName, $scope.data.password).then(success, error);
    };
  });

  Site.controller('CaseCreateCtrl', function($scope) {
    return $scope.data = {
      message: "gogo go go go"
    };
  });

  Site.controller('UserIndexCtrl', function($scope, $location, $routeParams, Api, Utils) {
    console.log('ABE');
    $scope.user = new Api.user();
    $scope.user.Roles = [];
    $scope.users = Api.user.query();
    $scope.availableUserRoles = Api.userRole.query();
    $scope.addUser = function() {
      var error, success;
      success = function() {
        return $location.path('/manage/users');
      };
      error = function(u, response) {
        alert('something bad happened while creating user');
        return console.log(u, response);
      };
      return $scope.user.$save({}, success, error);
    };
    $scope.removeRole = function(role) {
      var _ref;
      return _ref = Utils.moveElement(role, $scope.user.Roles, $scope.availableUserRoles), $scope.user.Roles = _ref[0], $scope.availableUserRoles = _ref[1], _ref;
    };
    $scope.removeUser = function(user) {
      return Api.user.remove({
        id: user.Id
      }, function() {
        return $scope.apply(function() {
          return $scope.users = Api.user.query();
        });
      });
    };
    $scope.activePage = $routeParams.page;
    return $scope.$on('$routeChangeSuccess', function(scope, next, current) {
      return $scope.activePage = next.params.page;
    });
  });

  Site.directive('vldt', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var DIGIT_REGEX, EMAIL_REGEX, handleErrors, messageForRule, messages, p, rawRule, rulePart, rules;
        EMAIL_REGEX = /^(([^<>()[\]\\.,;:\s@\”]+(\.[^<>()[\]\\.,;:\s@\”]+)*)|(\”.+\”))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        DIGIT_REGEX = /^\d+$/;
        rules = (function() {
          var _i, _j, _len, _len1, _ref, _ref1, _results;
          _ref = attrs.vldt.split(',');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rawRule = _ref[_i];
            p = {
              type: null,
              param: null,
              message: null
            };
            _ref1 = rawRule.split(/(?=[:|!])/);
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              rulePart = _ref1[_j];
              $.trim(rulePart);
              switch (rulePart.charAt(0)) {
                case ";":
                  p.message = $.trim(rulePart.substring(1));
                  break;
                case ":":
                  p.param = $.trim(rulePart.substring(1));
                  break;
                default:
                  p.type = $.trim(rulePart);
              }
            }
            _results.push(p);
          }
          return _results;
        })();
        messages = {
          req: 'Feltet skal udfyldes',
          mail: 'Ikke en gyldig email',
          length: 'Mindst :param: karaktere',
          match: 'Er ikke ens',
          digit: 'Må kun indeholde tal'
        };
        messageForRule = function(rule) {
          var _ref;
          return ((_ref = rule.message) != null ? _ref : rule.message = messages[rule.type]).replace(':param:', rule.param);
        };
        handleErrors = function(rules) {
          if (rules.length === 0) {
            return element.removeClass('vldt-error');
          } else {
            return element.addClass('vldt-error');
          }
        };
        return $(element).on('change', function() {
          var failedRules, rule, val, _i, _len;
          failedRules = [];
          val = $(this).val();
          for (_i = 0, _len = rules.length; _i < _len; _i++) {
            rule = rules[_i];
            switch (rule.type) {
              case 'req':
                if (val.length === 0) {
                  failedRules.push(rule);
                }
                break;
              case 'mail':
                if (!EMAIL_REGEX.test(val)) {
                  failedRules.push(rule);
                }
                break;
              case 'length':
                if (val.length < parseInt(rule.param, 10)) {
                  failedRules.push(rule);
                }
                break;
              case 'match':
                if (val !== $(rule.param).val()) {
                  failedRules.push(rule);
                }
                break;
              case 'digit':
                if (!DIGIT_REGEX.test(val)) {
                  failedRules.push(rule);
                }
                break;
              default:
                throw new Error("Unknown rule type '" + rule.type + "'");
            }
          }
          return handleErrors(failedRules);
        });
      }
    };
  });

  Site.directive('roleNav', function(Session) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var requiredRole, updateVisibility;
        requiredRole = parseInt(attrs.roleNav);
        updateVisibility = function() {
          if (requiredRole === 0) {
            return element.show();
          } else if (Session.isLoggedIn() && requiredRole === -1) {
            return element.hide();
          } else if (Session.isLoggedIn() && _.any(Session.user.Roles, function(role) {
            return role.Id === requiredRole;
          })) {
            return element.show();
          } else if (!Session.isLoggedIn() && requiredRole === -1) {
            return element.show();
          } else {
            return element.hide();
          }
        };
        scope.$on('session:changed', function() {
          return updateVisibility();
        });
        return updateVisibility();
      }
    };
  });

  Site.value('BaseURL', 'http://192.168.0.5\\:8080');

  Site.factory('Utils', function() {
    return {
      moveElement: function(match, fromArr, toArr) {
        var elms, newFrom, newTo;
        elms = typeof match === 'object' ? _.where(fromArr, match) : [match];
        newTo = _.union(toArr, elms);
        newFrom = _.difference(fromArr, elms);
        return [newFrom, newTo];
      }
    };
  });

  Site.service('Api', function($http, $resource, BaseURL) {
    return {
      translation: $resource(BaseURL + '/api/translation/:id'),
      user: $resource(BaseURL + '/api/user/:id'),
      company: $resource(BaseURL + '/api/company/:id'),
      userRole: $resource(BaseURL + '/api/userrole/:id'),
      auth: {
        login: function(name, password) {
          return $http.post("http://192.168.0.5:8080/api/access/login", {
            Name: name,
            Password: password
          });
        },
        ping: function(token) {
          return $http({
            method: 'POST',
            url: "http://192.168.0.5:8080/api/ping",
            headers: {
              Authorization: "token " + token
            }
          });
        }
      }
    };
  });

  Site.service('Session', function($cookieStore, $http, $rootScope, $q, Api) {
    this.user = null;
    return {
      generateToken: function(id, token) {
        return Base64.encode("" + id + ":" + token);
      },
      login: function(user) {
        var token;
        this.user = user;
        token = this.generateToken(user.Id, user.AccessToken);
        $cookieStore.put('session-user', this.user);
        $http.defaults.headers.common['Authorization'] = "token " + token;
        return $rootScope.$broadcast('session:changed');
      },
      logout: function() {
        this.user = null;
        $cookieStore.remove('session-user');
        delete $http.defaults.headers.common['Authorization'];
        return $rootScope.$broadcast('session:changed');
      },
      isLoggedIn: function() {
        return this.user != null;
      },
      tryCookie: function() {
        var deferred, error, sessionUser, success,
          _this = this;
        deferred = $q.defer();
        sessionUser = $cookieStore.get('session-user');
        if (sessionUser) {
          success = function() {
            _this.login(sessionUser);
            return deferred.resolve();
          };
          error = function() {
            return deferred.reject();
          };
          this.validateSession(sessionUser).then(success, error);
        } else {
          deferred.reject();
        }
        return deferred.promise;
      },
      validateSession: function(sessionUser) {
        var deferred;
        if (sessionUser == null) {
          deferred = $q.defer();
          deferred.reject();
          return deferred;
        }
        return Api.auth.ping(this.generateToken(sessionUser.Id, sessionUser.AccessToken));
      }
    };
  });

  methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];

  length = methods.length;

  console = (window.console = window.console || {});

  while (length--) {
    method = methods[length];
    if (!console[method]) {
      console[method] = function() {};
    }
  }

}).call(this);
